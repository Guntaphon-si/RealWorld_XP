import { Component, AfterViewInit, HostListener, ElementRef, Renderer2, OnDestroy, OnInit } from '@angular/core';
import { NgIf } from '@angular/common'; // NgIf ‡∏°‡∏≤‡∏à‡∏≤‡∏Å CommonModule
import { RouterLink } from '@angular/router'; // üëà 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ import RouterLink

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [
    NgIf, 
    RouterLink // üëà 2. ‡πÄ‡∏û‡∏¥‡πà‡∏° RouterLink ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô imports array
  ],
  templateUrl: './home.html',
  styleUrls: ['./home.css']
})
export class HomeComponent implements OnInit, AfterViewInit, OnDestroy {
  
  // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® property 'user' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ template ‡πÅ‡∏•‡∏∞ method ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ
  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î type ‡πÄ‡∏õ‡πá‡∏ô object ‡∏ó‡∏µ‡πà‡∏°‡∏µ name ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô null ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô null (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô)
  user: { username: string } | null = null; 
  showScrollTopButton = false; // üëà 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° property ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏õ‡∏∏‡πà‡∏°
  
  private observer!: IntersectionObserver;

  constructor(private el: ElementRef, private renderer: Renderer2) {}

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
  private checkLoginStatus(): void {
    const userData = localStorage.getItem('currentUser');
    if (userData) {
      const parsedUser = JSON.parse(userData);
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ property 'username' ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
      if (parsedUser && parsedUser.username) {
        this.user = { username: parsedUser.username };
      } else {
        this.user = null; // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
      }
    } else {
      this.user = null;
    }
    console.log('HomeComponent: Login status checked.', this.user);
  }

  ngOnInit(): void {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    this.checkLoginStatus();

    // 2. ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡πÄ‡∏û‡∏∑‡πà‡∏≠ "‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á" ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô
    // ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ arrow function `() => this.checkLoginStatus()` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ `this` ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á HomeComponent
    window.addEventListener('loginStateChange', this.handleLoginStateChange);
  }

  ngAfterViewInit(): void {
    this.createParticles();
    this.setupSmoothScrolling();
    this.initIntersectionObserver();

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏ú‡∏∑‡πà‡∏≠ element ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß
    this.onWindowScroll();
  }

  // Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Scroll Event
  @HostListener('window:scroll', [])
  onWindowScroll(): void {
    // Navbar style change
    const navbar = this.el.nativeElement.querySelector('nav');
    if (window.scrollY > 100) {
      this.renderer.addClass(navbar, 'scrolled');
    } else {
      this.renderer.removeClass(navbar, 'scrolled');
    }

    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á scroll ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° Page Up
    // ‡∏ñ‡πâ‡∏≤ scroll ‡∏•‡∏á‡∏°‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 400px ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°
    this.showScrollTopButton = window.scrollY > 400;

    // Trigger scroll animations for elements
    const elements = this.el.nativeElement.querySelectorAll('.animate-on-scroll');
    elements.forEach((element: HTMLElement) => {
      const elementTop = element.getBoundingClientRect().top;
      if (elementTop < window.innerHeight - 100) {
        this.renderer.addClass(element, 'animated');
      }
    });
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Particle ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Background
  createParticles(): void {
    const container = this.el.nativeElement.querySelector('.bg-animation');
    for (let i = 0; i < 50; i++) {
        const particle = this.renderer.createElement('div');
        this.renderer.addClass(particle, 'particle');
        this.renderer.setStyle(particle, 'left', `${Math.random() * 100}%`);
        this.renderer.setStyle(particle, 'top', `${Math.random() * 100}%`);
        this.renderer.setStyle(particle, 'animationDelay', `${Math.random() * 6}s`);
        this.renderer.setStyle(particle, 'animationDuration', `${Math.random() * 3 + 3}s`);
        this.renderer.appendChild(container, particle);
    }
  }

  // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Section ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•
  setupSmoothScrolling(): void {
    const links = this.el.nativeElement.querySelectorAll('a[href^="#"]');
    links.forEach((anchor: HTMLAnchorElement) => {
        anchor.addEventListener('click', (e: Event) => {
            e.preventDefault();
            const targetId = anchor.getAttribute('href');
            if (targetId) {
                const targetElement = this.el.nativeElement.querySelector(targetId);
                if (targetElement) {
                    targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }
            }
        });
    });
  }

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Intersection Observer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡πà‡∏≤ Element ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  initIntersectionObserver(): void {
    const options = {
      root: null,
      rootMargin: '0px',
      threshold: 0.1
    };
    
    this.observer = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ class 'animated' ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ animation ‡πÅ‡∏ó‡∏ô
          // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ animation ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ function ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÑ‡∏î‡πâ
          this.renderer.addClass(entry.target, 'animated');
          observer.unobserve(entry.target);
        }
      });
    }, options);

    const targets = this.el.nativeElement.querySelectorAll('.animate-on-scroll');
    targets.forEach((target: Element) => {
      this.observer.observe(target);
    });
  }
  
  // Clean up observer ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏•‡∏≤‡∏¢
  ngOnDestroy(): void {
    if (this.observer) {
      this.observer.disconnect();
    }
    // 3. ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Event Listener ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Component ‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Memory Leak
    window.removeEventListener('loginStateChange', this.handleLoginStateChange);
  }

  // ‡πÉ‡∏ä‡πâ Arrow function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ `this` ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏°‡∏≠
  private handleLoginStateChange = (): void => {
    this.checkLoginStatus();
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô logout()
  logout(): void {
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å localStorage
    localStorage.removeItem('currentUser');
    // "‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®" ‡∏ö‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏õ‡∏ß‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
    window.dispatchEvent(new CustomEvent('loginStateChange'));
  }

  // 3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î
  scrollToTop(): void {
    window.scrollTo({
      top: 0,
      behavior: 'smooth' // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•
    });
  }
}