import { Component, OnInit, OnDestroy, ElementRef, Renderer2 } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ApiService, User, Activity } from '../services/api'; 
import { ActivatedRoute, Router } from '@angular/router'; 

@Component({
  selector: 'app-activity-flow',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './activity-flow.html',
  styleUrls: ['./activity-flow.css']
})
export class ActivityFlowComponent implements OnInit, OnDestroy {

  currentStep: 'loading' | 'start' | 'timer' | 'complete' = 'loading';

  user: User | null = null;
  activity: Activity | null = null;
  activityIcon: string = 'üßò‚Äç‚ôÄÔ∏è';

  private activityIconMap = new Map<string, string>([
    ["‡∏à‡∏î‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏•‡∏á‡∏™‡∏°‡∏∏‡∏î", "‚úçÔ∏è"],
    ["‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á", "üß≥"],
    ["‡∏à‡∏±‡∏î‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ", "üñ•Ô∏è"],
    ["‡∏ä‡∏µ‡πâ‡∏à‡∏∏‡∏î‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà/‡∏•‡∏π‡∏Å‡πÇ‡∏•‡∏Å", "üó∫Ô∏è"],
    ["‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤ 1 ‡πÅ‡∏Å‡πâ‡∏ß‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡∏∑‡πà‡∏ô", "üíß"],
    ["‡∏ï‡πà‡∏≠‡πÄ‡∏•‡πÇ‡∏Å‡πâ/‡πÇ‡∏°‡πÄ‡∏î‡∏• 1 ‡∏ä‡∏¥‡πâ‡∏ô", "üß±"],
    ["‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà", "üñêÔ∏è"],
    ["‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏≤‡∏¢‡∏ï‡∏≤", "üìè"],
    ["‡∏õ‡∏¥‡∏î‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå-‡∏ñ‡∏≠‡∏î‡∏õ‡∏•‡∏±‡πä‡∏Å", "üîå"],
    ["‡∏ù‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ö‡∏ï‡∏≤‡πÅ‡∏•‡∏∞‡∏¢‡∏¥‡πâ‡∏°", "üòä"],
    ["‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à \"‡∏°‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ü‡πâ‡∏≤\"", "‚òÅÔ∏è"],
    ["‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏¢‡∏∞ 3 ‡∏ä‡∏¥‡πâ‡∏ô", "üöÆ"],
    ["‡∏°‡∏≠‡∏á‡∏´‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥", "üåø"],
    ["‡∏¢‡∏∑‡∏î‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô", "ü§∏"],
    ["‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ/‡∏î‡∏π‡πÅ‡∏•‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏±‡∏Å", "üå±"],
    ["‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ç‡∏¢‡∏∞", "ü•ó"],
    ["‡∏ß‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô-‡∏•‡∏á‡∏ö‡∏±‡∏ô‡πÑ‡∏î", "üëü"],
    ["‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏ß", "üìà"],
    ["‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡πÅ‡∏•‡∏∞‡∏™‡πÄ‡∏Å‡πá‡∏ï‡∏ä‡πå‡∏†‡∏≤‡∏û", "üé®"],
    ["‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à/‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏ô‡πÄ‡∏≠‡∏á 1 ‡∏ö‡∏ó", "üìö"],
    ["‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô To-Do List ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ", "üìù"],
    ["‡πÄ‡∏î‡∏¥‡∏ô‡∏£‡∏±‡∏ö‡πÅ‡∏î‡∏î‡πÄ‡∏ä‡πâ‡∏≤", "‚òÄÔ∏è"],
    ["‡πÄ‡∏î‡∏¥‡∏ô‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏ã‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏∏‡πâ‡∏ô‡πÄ‡∏Ñ‡∏¢", "üó∫Ô∏è"],
    ["‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏ó‡πâ‡∏≤/‡∏õ‡∏±‡πà‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏£‡∏ñ", "üö≤"],
    ["‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏™‡∏°‡∏≠‡∏á", "üèÉ"],
  ]);


  isPaused = false;
  timeRemaining: number = 0;
  formattedTime: string = '00:00';
  private timerInterval: any;

  isModalVisible = false;

  constructor(
    private apiService: ApiService,
    private route: ActivatedRoute,
    private router: Router,
    private el: ElementRef,
    private renderer: Renderer2
  ) {}

  

  ngOnInit(): void {
    this.createParticles(50, 'particles-js');
    this.route.queryParams.subscribe(params => {
      const userId = +params['userId'];
      const activityId = +params['activityId'];

      if (userId && activityId) {
        this.loadInitialData(userId, activityId);
      } else {
        console.error('User ID and Activity ID are required');
      }
    });
  }

  private getActivityIcon(activityName: string): string {
    return this.activityIconMap.get(activityName) || '‚ú®'; 
  }

  loadInitialData(userId: number, activityId: number): void {
    this.currentStep = 'loading';
    this.apiService.getUser(userId).subscribe(user => this.user = user);
    this.apiService.getActivity(activityId).subscribe(activity => {
      this.activity = activity;
      if (this.activity) {
        this.activityIcon = this.getActivityIcon(this.activity.name);
      }
      // this.timeRemaining = this.activity.base_time * 60;
      this.timeRemaining = this.activity.base_time ;
      this.formattedTime = this.formatTime(this.timeRemaining);
      this.currentStep = 'start';
    });
  }

  startActivity(): void {
    if (!this.activity) return;
    this.currentStep = 'timer';
    this.startTimer();
  }

  completeActivity(): void {
    if (!this.user || !this.activity) return;
    clearInterval(this.timerInterval);

    this.apiService.completeActivity(this.user.id, this.activity.id).subscribe(updatedUser => {
        this.user = updatedUser; 
        this.currentStep = 'complete';
        setTimeout(() => this.createConfetti(120, 'confetti-js'), 100);
    });
  }

  goToDashboard(): void {
    this.router.navigate(['/dashboard']);
  }

  private startTimer(): void {
    this.timerInterval = setInterval(() => {
      if (!this.isPaused && this.timeRemaining > 0) {
        this.timeRemaining--;
        this.formattedTime = this.formatTime(this.timeRemaining);
      } else if (this.timeRemaining <= 0) {
        this.completeActivity();
      }
    }, 1000);
  }

  togglePause(): void { this.isPaused = !this.isPaused; }
  private formatTime(seconds: number): string {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  }

  showCancelModal(): void { this.isModalVisible = true; }
  closeModal(): void { this.isModalVisible = false; }
  confirmCancel(): void {
    this.isModalVisible = false;
    clearInterval(this.timerInterval);
    if (this.user && this.activity) {
      this.loadInitialData(this.user.id, this.activity.id);
    }
  }

  get xpProgressPercentage(): number {
    if (!this.user) return 0;
    return (this.user.current_xp / this.user.xp_for_next_level) * 100;
  }

  ngOnDestroy(): void {
    if (this.timerInterval) clearInterval(this.timerInterval);
  }

 private createParticles(count: number, containerId: string): void {
    const container = this.el.nativeElement.querySelector(`#${containerId}`);
    if (!container) return;

    for (let i = 0; i < count; i++) {
      const particle = this.renderer.createElement('div');
      this.renderer.addClass(particle, 'particle');
      this.renderer.setStyle(particle, 'left', `${Math.random() * 100}%`);
      this.renderer.setStyle(particle, 'animation-duration', `${Math.random() * 15 + 10}s`);
      this.renderer.setStyle(particle, 'animation-delay', `${Math.random() * 5}s`);
      const xEnd = (Math.random() - 0.5) * 400;
      this.renderer.setStyle(particle, '--x-end', `${xEnd}px`);
      this.renderer.appendChild(container, particle);
    }
  }

  private createConfetti(count: number, containerId: string): void {
    const container = this.el.nativeElement.querySelector(`#${containerId}`);
    if (!container) return;
    
    container.innerHTML = '';

    const colors = ['#64ffda', '#fb923c', '#facc15', '#a78bfa'];
    for (let i = 0; i < count; i++) {
      const confettiPiece = this.renderer.createElement('div');
      this.renderer.addClass(confettiPiece, 'confetti-piece');
      this.renderer.setStyle(confettiPiece, 'left', `${Math.random() * 100}%`);
      this.renderer.setStyle(confettiPiece, 'background-color', colors[Math.floor(Math.random() * colors.length)]);
      this.renderer.setStyle(confettiPiece, 'transform', `rotate(${Math.random() * 360}deg)`);
      this.renderer.setStyle(confettiPiece, 'animation-duration', `${Math.random() * 3 + 2}s`);
      this.renderer.setStyle(confettiPiece, 'animation-delay', `${Math.random() * 2}s`);
      this.renderer.appendChild(container, confettiPiece);
    }
  }
}